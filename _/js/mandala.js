// Generated by CoffeeScript 1.3.3
(function() {
  var Circles, MandalaControlsView, MandalaModel, get_change_object;

  get_change_object = function(name, element_value) {
    return JSON.parse((function() {
      switch (name) {
        case 'animating':
          if (element_value === 'Stop') {
            return "{\"" + name + "\": false }";
          } else {
            return "{\"" + name + "\": true }";
          }
          break;
        default:
          if (/^[-+]?\d+\.\d+$/.test(element_value)) {
            return "{\"" + name + "\":" + parseFloat(element_value, 10) + "}";
          } else if (/^[-+]?\d+$/.test(element_value)) {
            return "{\"" + name + "\":" + parseInt(element_value, 10) + "}";
          } else {
            return "{\"" + name + "\":\"" + element_value + "\"}";
          }
      }
    })());
  };

  Circles = (function() {

    function Circles(mandala) {
      var _this = this;
      this.mandala = mandala;
      this.num_circles = 100;
      this.x_radius = Math.floor(this.mandala.model.get('avg'));
      this.y_radius = Math.floor(this.mandala.model.get('avg'));
      this.radii = Math.floor(this.mandala.model.get('avg'));
      this.circle_jerker = $('#num_circles');
      this.circle_jerker.attr('value', this.num_circles);
      this.circle_jerker.change(function(event) {
        _this.num_circles = _this.circle_jerker.attr('value');
        return _this.mandala.draw();
      });
      this.x_radius_jerker = $('#x_radius');
      this.x_radius_jerker.attr('value', this.x_radius);
      this.x_radius_jerker.change(function(event) {
        _this.x_radius = _this.x_radius_jerker.attr('value');
        return _this.mandala.draw();
      });
      this.y_radius_jerker = $('#y_radius');
      this.y_radius_jerker.attr('value', this.y_radius);
      this.y_radius_jerker.change(function(event) {
        _this.y_radius = _this.y_radius_jerker.attr('value');
        return _this.mandala.draw();
      });
      this.radii_jerker = $('#radii');
      this.radii_jerker.attr('value', this.radii);
      this.radii_jerker.change(function(event) {
        _this.radii = _this.radii_jerker.attr('value');
        return _this.mandala.draw();
      });
    }

    Circles.prototype.draw = function() {
      var angle, canvas, i, mid, offset, x, y, _i, _ref, _results;
      canvas = this.mandala.canvas;
      mid = this.mandala.model.get('mid');
      offset = this.mandala.model.get('offset');
      _results = [];
      for (i = _i = 1, _ref = this.num_circles; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
        angle = ((2.0 * Math.PI / this.num_circles) * i) + offset;
        x = this.x_radius * Math.sin(angle);
        y = this.y_radius * Math.cos(angle);
        canvas.beginPath();
        canvas.arc(mid.x + x, mid.y + y, this.radii, 0, 2.0 * Math.PI);
        _results.push(canvas.stroke());
      }
      return _results;
    };

    return Circles;

  })();

  MandalaModel = Backbone.Model.extend({
    defaults: {
      height: 400,
      width: 400,
      step: 0.008,
      offset: 0.0,
      animating: false
    },
    initialize: function() {
      return this.calculate_dimensional_attributes();
    },
    calculate_dimensional_attributes: function() {
      return this.set({
        mid: {
          x: Math.floor(this.get('width') / 2),
          y: Math.floor(this.get('height') / 2)
        },
        avg: Math.floor((this.get('width') + this.get('height')) / 2)
      });
    },
    increment: function() {
      return this.set('offset', this.get('offset') + this.get('step'));
    }
  });

  MandalaControlsView = Backbone.View.extend({
    el: '#mandala',
    model: new MandalaModel,
    initialize: function() {
      this.render();
      this.canvas_el = $('#mandala-canvas').get(0);
      this.canvas = this.canvas_el.getContext('2d');
      this.toggler = $('input[name=animating]');
      this.components = [new Circles(this)];
      this.model.bind('change', this.model_changed, this);
      this.model_changed();
      return this.draw();
    },
    render: function() {
      var template;
      template = _.template($('#mandala-template').html(), this.model.toJSON());
      return this.$el.html(template);
    },
    events: {
      "change input": "control_changed",
      "click  input[type=button]": "control_changed"
    },
    control_changed: function(evt) {
      var chg_obj, element_value, name;
      name = evt.currentTarget.name;
      element_value = evt.currentTarget.value;
      chg_obj = get_change_object(name, element_value);
      return this.model.set(chg_obj);
    },
    model_changed: function() {
      if (this.model.get('animating')) {
        return this.go();
      } else {
        return this.stop();
      }
    },
    go: function() {
      var _this = this;
      if (!this.animate_interval) {
        this.animate_interval = setInterval((function() {
          _this.draw();
          return _this.model.increment();
        }), 1000.0 / 30.0);
      }
      return this.toggler.attr('value', 'Stop');
    },
    stop: function() {
      if (this.animate_interval) {
        clearInterval(this.animate_interval);
      }
      this.animate_interval = null;
      return this.toggler.attr('value', 'Start');
    },
    draw: function() {
      var component, _i, _len, _ref, _results;
      this.canvas.clearRect(0, 0, this.model.get('height'), this.model.get('width'));
      _ref = this.components;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        component = _ref[_i];
        _results.push(component.draw());
      }
      return _results;
    }
  });

  $(window).ready(function() {
    var m;
    return m = new MandalaControlsView;
  });

}).call(this);
