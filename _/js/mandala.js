// Generated by CoffeeScript 1.3.3
(function() {
  var CirclesModel, CirclesView, MandalaControlsView, MandalaModel, get_change_object;

  get_change_object = function(name, element_value) {
    return JSON.parse((function() {
      switch (name) {
        case 'animating':
          if (element_value === 'Stop') {
            return "{\"" + name + "\": false }";
          } else {
            return "{\"" + name + "\": true }";
          }
          break;
        default:
          if (/^[-+]?\d+\.\d+$/.test(element_value)) {
            return "{\"" + name + "\":" + parseFloat(element_value, 10) + "}";
          } else if (/^[-+]?\d+$/.test(element_value)) {
            return "{\"" + name + "\":" + parseInt(element_value, 10) + "}";
          } else {
            return "{\"" + name + "\":\"" + element_value + "\"}";
          }
      }
    })());
  };

  MandalaModel = Backbone.Model.extend({
    defaults: {
      height: 400,
      width: 400,
      step: 0.008,
      offset: 0.0,
      animating: false
    },
    initialize: function() {
      return this.calculate_dimensional_attributes();
    },
    calculate_dimensional_attributes: function() {
      return this.set({
        mid: {
          x: Math.floor(this.get('width') / 2),
          y: Math.floor(this.get('height') / 2)
        },
        avg: Math.floor((this.get('width') + this.get('height')) / 2)
      });
    },
    increment: function() {
      return this.set('offset', this.get('offset') + this.get('step'));
    }
  });

  CirclesModel = Backbone.Model.extend({
    defaults: {
      num_circles: 100,
      x_radius: 400,
      y_radius: 400,
      radii: 400
    }
  });

  CirclesView = Backbone.View.extend({
    model: new CirclesModel,
    mandala_model: null,
    canvas: null,
    mandala_control: null,
    initialize: function() {
      return this.render();
    },
    render: function() {
      var template;
      template = _.template($('#circles-template').html(), this.model.toJSON());
      return this.$el.html(template);
    },
    events: {
      "change input": "control_changed",
      "click  input[type=button]": "control_changed"
    },
    control_changed: function(evt) {
      var chg_obj, element_value, name;
      name = evt.currentTarget.name;
      element_value = evt.currentTarget.value;
      chg_obj = get_change_object(name, element_value);
      this.model.set(chg_obj);
      if (!this.mandala_model.get('animating')) {
        return this.mandala_control.draw();
      }
    },
    draw: function() {
      var angle, i, mid, num_circles, offset, radii, x, x_radius, y, y_radius, _i, _results;
      mid = this.mandala_model.get('mid');
      offset = this.mandala_model.get('offset');
      num_circles = this.model.get('num_circles');
      x_radius = this.model.get('x_radius');
      y_radius = this.model.get('y_radius');
      radii = this.model.get('radii');
      _results = [];
      for (i = _i = 1; 1 <= num_circles ? _i <= num_circles : _i >= num_circles; i = 1 <= num_circles ? ++_i : --_i) {
        angle = ((2.0 * Math.PI / num_circles) * i) + offset;
        x = x_radius * Math.sin(angle);
        y = y_radius * Math.cos(angle);
        this.canvas.beginPath();
        this.canvas.arc(mid.x + x, mid.y + y, radii, 0, 2.0 * Math.PI);
        _results.push(this.canvas.stroke());
      }
      return _results;
    }
  });

  MandalaControlsView = Backbone.View.extend({
    el: '#mandala',
    model: new MandalaModel,
    components: [],
    initialize: function() {
      this.render();
      this.canvas_el = $('#mandala-canvas').get(0);
      this.canvas = this.canvas_el.getContext('2d');
      this.toggler = $('input[name=animating]');
      this.add_control('circles');
      this.model.bind('change', this.model_changed, this);
      this.model_changed();
      return this.draw();
    },
    add_control: function(type) {
      var new_component;
      new_component = new CirclesView({
        el: '#circles-0'
      });
      new_component.mandala_model = this.model;
      new_component.canvas = this.canvas;
      new_component.reset_canvas = this.draw;
      new_component.mandala_control = this;
      return this.components.push(new_component);
    },
    render: function() {
      var template;
      template = _.template($('#mandala-template').html(), this.model.toJSON());
      return this.$el.html(template);
    },
    events: {
      "change input": "control_changed",
      "click  input[type=button]": "control_changed"
    },
    control_changed: function(evt) {
      var chg_obj, element_value, name;
      name = evt.currentTarget.name;
      element_value = evt.currentTarget.value;
      chg_obj = get_change_object(name, element_value);
      return this.model.set(chg_obj);
    },
    model_changed: function() {
      if (this.model.get('animating')) {
        return this.go();
      } else {
        return this.stop();
      }
    },
    go: function() {
      var _this = this;
      if (!this.animate_interval) {
        this.animate_interval = setInterval((function() {
          _this.draw();
          return _this.model.increment();
        }), 1000.0 / 30.0);
      }
      return this.toggler.attr('value', 'Stop');
    },
    stop: function() {
      if (this.animate_interval) {
        clearInterval(this.animate_interval);
      }
      this.animate_interval = null;
      return this.toggler.attr('value', 'Start');
    },
    draw: function() {
      var component, _i, _len, _ref, _results;
      this.canvas.clearRect(0, 0, this.model.get('height'), this.model.get('width'));
      _ref = this.components;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        component = _ref[_i];
        _results.push(component.draw());
      }
      return _results;
    }
  });

  $(window).ready(function() {
    var m;
    return m = new MandalaControlsView;
  });

}).call(this);
